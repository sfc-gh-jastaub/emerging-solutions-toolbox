import pickle

func = pickle.loads(bytes.fromhex(''))
# The following comment contains the source code generated by snowpark-python for explanatory purposes.
# import json
# import random
# import snowflake.snowpark.functions as F
# import snowflake.snowpark.types as T
# from datetime import datetime
# from snowflake.snowpark.dataframe import DataFrame as SnowparkDataFrame
# from utility_functions_non_stat import compare_column_aggregates, get_group_aggregates
# config_schema  # variable of type <class 'str'>
# jobs_tbl_nm  # variable of type <class 'str'>
# temp_file_stage  # variable of type <class 'str'>
# temp_objects_schema  # variable of type <class 'str'>
# def dq_non_stat_sproc(session: Session, job_nm:str, job_specs: dict) -> dict:
#     # Create a string of the current datetime. This will be used to name temporary objects and will also be stored in results table.
#     run_dttm = datetime.now()
#     run_dttm_str = run_dttm.strftime("%Y_%m_%d_%H_%M_%S")
#
#     random_number = random.randint(1000, 9000)
#
#     # If a valid JOB_NAME is provided, procure the most current JOB_ID and JOB_SPECS for that job
#     if job_nm:
#         active_record_df = (
#             session.table(f"{config_schema}.{jobs_tbl_nm}")
#             .filter((F.col("JOB_NAME") == F.lit(job_nm)) & (F.col("IS_ACTIVE") == True))
#         )  # Obtain the ACTIVE Record for that JOB_NAME 
#
#         job_record = (
#             active_record_df
#             .groupBy("JOB_NAME")
#             .agg(F.max("JOB_ID").alias("MAX_JOB_ID"))
#             .join(active_record_df, on=["JOB_NAME"], how='inner')
#             .filter(F.col("JOB_ID")==F.col("MAX_JOB_ID"))
#             .collect()
#         ) # In the unexpected event that there is somehow more than one ACTIVE record for the given JOB_NAME, take the highest JOB_ID number
#
#         # If an active job is found in the DQ_JOBS table then get the JOB_ID and JOB_SPECS dictionary
#         if job_record:
#             job_id = job_record[0]["JOB_ID"]
#             job_specs = json.loads(job_record[0]["JOB_SPECS"])
#         else:
#             # If there were no active jobs in the DQ_JOBS table, then job_record will be an empty list. 
#             return {
#                 "JOB_NAME": job_nm,
#                 "ERROR": 'No active jobs with that name'
#             }
#     else:
#         job_id = -1
#
#     # *****************************************************
#     # Extract variables from the job_specs json
#     # *****************************************************
#     a_qualified_input_table_nm = (
#         job_specs["TABLE_A_DB_NAME"]
#         + "."
#         + job_specs["TABLE_A_SCHEMA_NAME"]
#         + "."
#         + job_specs["TABLE_A_NAME"]
#     )
#     b_qualified_input_table_nm = (
#         job_specs["TABLE_B_DB_NAME"]
#         + "."
#         + job_specs["TABLE_B_SCHEMA_NAME"]
#         + "."
#         + job_specs["TABLE_B_NAME"]
#     )
#
#     a_sql_filter_str = job_specs["TABLE_A_FILTER"]
#     b_sql_filter_str = job_specs["TABLE_B_FILTER"]
#
#     a_record_id_cols = job_specs["TABLE_A_RECORD_ID_COLUMNS"]
#     b_record_id_cols = job_specs["TABLE_B_RECORD_ID_COLUMNS"]
#
#     a_partition_cols = job_specs["TABLE_A_PARTITION_COLUMNS"]
#     b_partition_cols = job_specs["TABLE_B_PARTITION_COLUMNS"]
#     if a_partition_cols is None:
#         a_partition_cols = []
#     if b_partition_cols is None:
#         b_partition_cols = []
#
#     # Create a dictionary containing the columns to analyze for each check #TODO: Add an _ btwn check and the number so a_check1_columns becomes a_check_1_columns
#     a_checks_columns = {
#         f'a_check{check["CHECK_TYPE_ID"]}_columns': check["TABLE_A_COLUMNS"]
#         for check in job_specs["CHECKS"]
#         if check["CHECK_TYPE_ID"] not in [1]
#     }
#
#     b_checks_columns = {
#         f'b_check{check["CHECK_TYPE_ID"]}_columns': check["TABLE_B_COLUMNS"]
#         for check in job_specs["CHECKS"]
#         if check["CHECK_TYPE_ID"] not in [1]
#     }
#
#     check_specs = {**a_checks_columns, **b_checks_columns}
#
#
#     # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#     # ALERT THRESHOLDS
#     # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#     alert_thresholds = {
#         f'check{check["CHECK_TYPE_ID"]}_thresholds': check["ALERT_THRESHOLD"]
#         for check in job_specs["CHECKS"]
#     }
#
#     check_specs = {**check_specs, **alert_thresholds}
#     # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
#
#     # Create a list of check ids for the given job. This will be used to only run checks that are in the list
#     check_id_list = [check["CHECK_TYPE_ID"] for check in job_specs["CHECKS"]]
#
#     # Specify where to write the results
#     results_db = job_specs["RESULTS_DB"]
#
#     if job_id >= 0:
#         results_schema = job_specs["RESULTS_SCHEMA"]
#         results_tbl_nm = job_specs["RESULTS_TBL_NM"]
#         qualified_result_tbl_nm = f"{results_db}.{results_schema}.{results_tbl_nm}"
#         results_tbl_columns = session.table(qualified_result_tbl_nm).columns
#     else:
#         results_schema = "TEMPORARY_DQ_OBJECTS"
#         results_tbl_nm = f"TEMP_{run_dttm_str}_NON_STAT_RESULTS_{random_number}"
#         qualified_result_tbl_nm = f"{results_db}.{results_schema}.{results_tbl_nm}"
#         results_tbl_columns = [
#             "JOB_ID",
#             "RUN_DATETIME",
#             "CHECK_TYPE_ID",
#             "PARTITION_VALUES",
#             "CONTROL_TBL_NM",
#             "COMPARE_TBL_NM",
#             "RESULTS",
#             "ALERT_FLAG", # NOTE: Added ALERT_FLAG and ALERT_STATUS to the results tables # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#             "ALERT_STATUS" # NOTE: Added ALERT_FLAG and ALERT_STATUS to the results tables # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#         ]
#
#     # *****************************************************
#     # Establish base objects
#     # *****************************************************
#
#     # Establish Control and Comparison DataFrames for the 2 tables we're comparing
#     tbla = session.table(a_qualified_input_table_nm)
#     tblb = session.table(b_qualified_input_table_nm)
#
#     # Filter if a filter condition is specified
#     if a_sql_filter_str:
#         tbla = tbla.filter(F.expr(a_sql_filter_str))
#     if b_sql_filter_str:
#         tblb = tblb.filter(F.expr(b_sql_filter_str))
#
#     # Add an ARRAY column that holds the partion values
#     tbla = tbla.with_column("PARTITION_VALUES", F.array_construct(*a_partition_cols))
#     tblb = tblb.with_column("PARTITION_VALUES", F.array_construct(*b_partition_cols))
#
#     # Create a list to hold the names of any udfs we create
#     udfs_list = []
#
#     # Define and Register a UDF to subtract each value in two arrays of summary stats (like sum, null count, etc) to get a third array containing the changes
#     udf_nm = f"{temp_objects_schema}.subtract_arrays_{run_dttm_str}_udf_{random_number}"
#     udfs_list = udfs_list + [udf_nm]
#
#     @F.udf(
#         name=udf_nm,
#         session=session,
#         replace=True,
#         is_permanent=True,
#         stage_location=f"@{temp_objects_schema}.{temp_file_stage}",
#     )
#     def subtract_arrays(arr1: list, arr2: list) -> list:
#         return [round(x - y, 8) if (x is not None) & (y is not None) else None for x, y in zip(arr2, arr1)]
#
#
#     # Create an empty DataFrame to hold all the individual results 
#     # NOTE: Added ALERT_FLAG and ALERT_STATUS to the results tables # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#     unioned_results = session.create_dataframe(
#         [[None, None, None, None, None]], # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#         schema=T.StructType(
#             [
#                 T.StructField("CHECK_TYPE_ID", T.IntegerType()),
#                 T.StructField("PARTITION_VALUES", T.ArrayType()),
#                 T.StructField("RESULTS", T.VariantType()),
#                 T.StructField("ALERT_FLAG", T.LongType()), # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#                 T.StructField("ALERT_STATUS", T.StringType(200)) # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#             ]
#         ),
#     ).filter(F.col("CHECK_TYPE_ID").isNotNull())
#
#
#     # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#     # UDF FOR ALERT THRESHOLD COMPARISONS
#     # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#     # Define and Register a UDF to compare the numbers in two arrays (used to compare deltas to alert threshold values)
#     alert_compare_udf_nm = f"{temp_objects_schema}.compare_to_threshold_{run_dttm_str}_udf_{random_number}"
#     udfs_list = udfs_list + [alert_compare_udf_nm]
#
#     @F.udf(
#         name=alert_compare_udf_nm,
#         session=session,
#         replace=True,
#         is_permanent=True,
#         stage_location=f"@{temp_objects_schema}.{temp_file_stage}",
#     )
#     def compare_to_threshold(arr1: list, arr2: list) -> list:
#         return [1 if (x is None) else 1 if (z is not None) and (abs(x) > z) else 0 for x, z in zip(arr1, arr2)]
#
#
#     # Define and Register a UDF to compare min and max deltas to the threshold
#     alert_min_max_compare_udf_nm = f"{temp_objects_schema}.compare_min_max_to_threshold_{run_dttm_str}_udf_{random_number}"
#     udfs_list = udfs_list + [alert_min_max_compare_udf_nm]
#
#     @F.udf(
#         name=alert_min_max_compare_udf_nm,
#         session=session,
#         replace=True,
#         is_permanent=True,
#         stage_location=f"@{temp_objects_schema}.{temp_file_stage}",
#     )
#     def compare_min_max_deltas_to_threshold(min_arr: list, max_arr: list, threshold_arr:list) -> list:
#         return [1 if (x is None) | (y is None) else 1 if (z is not None) and ((abs(x) > z) | (abs(y) > z)) else 0 for x, y, z in zip(min_arr, max_arr, threshold_arr)]
#     # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
#
#
#     # *****************************************************
#     # Perform Checks
#     # *****************************************************
#
#     if (
#         1 in check_id_list
#     ):  # TODO: Maybe save a sproc for each check, and this pulls the correct sproc name from the DQ_JOBS table (instead of these IF blocks)
#         # *****************************************************
#         # CHECK 1: "table/partition total row count"
#         # *****************************************************
#
#         # Table A & B Row Counts
#         a_row_count = (
#             tbla.group_by("PARTITION_VALUES")
#             .count()
#             .with_column_renamed("COUNT", "TABLE_A_ROW_COUNT")
#         )
#         b_row_count = (
#             tblb.group_by("PARTITION_VALUES")
#             .count()
#             .with_column_renamed("COUNT", "TABLE_B_ROW_COUNT")
#         )
#         # Join the results into a single table
#         joined_df = a_row_count.join(b_row_count, on=["PARTITION_VALUES"])
#
#         result_df = joined_df.select(
#             F.lit(1).alias("CHECK_TYPE_ID"),
#             "PARTITION_VALUES",
#             # 'TABLE_A_ROW_COUNT',
#             # 'TABLE_B_ROW_COUNT',
#             # (F.col('TABLE_B_ROW_COUNT') - F.col('TABLE_A_ROW_COUNT')).alias("DELTA"),
#             F.object_construct_keep_null(
#                 F.lit("TABLE_A_ROW_COUNT"),
#                 "TABLE_A_ROW_COUNT",
#                 F.lit("TABLE_B_ROW_COUNT"),
#                 "TABLE_B_ROW_COUNT",
#                 F.lit("DELTA"),
#                 (F.col("TABLE_B_ROW_COUNT") - F.col("TABLE_A_ROW_COUNT")),
#             ).alias("RESULTS"),
#         )
#
#
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#         # INCORPORATE ALERT THRESHOLDS
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#         result_df = (
#             result_df
#             .with_column("RESULTS", 
#                         F.object_insert(F.col("RESULTS"), 
#                                         F.lit("ALERT_THRESHOLD"), 
#                                         F.lit(check_specs["check1_thresholds"]))
#                         )
#             .with_column("RESULTS", 
#                         F.object_insert(F.col("RESULTS"), 
#                                         F.lit("ALERT_TRIGGERED_FLAG"), 
#                                         F.array_append(F.lit([]), F.when(F.abs(F.col("RESULTS")["DELTA"]) > F.col("RESULTS")["ALERT_THRESHOLD"][0], 1).otherwise(0)))
#                         )
#             .with_column("ALERT_FLAG", 
#                         F.when(F.array_max(F.col("RESULTS")["ALERT_TRIGGERED_FLAG"])>0, 1).otherwise(0)
#                         )
#             .with_column("ALERT_STATUS", 
#                         F.when(F.col("ALERT_FLAG")==1, F.lit("pending review")).otherwise(None)
#                         )
#         )
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
#
#         # Add results to the unioned_results DF
#         unioned_results = unioned_results.union_all_by_name(result_df)
#
#     if 2 in check_id_list:
#         # *****************************************************
#         # CHECK 2: "record-level value change"
#         # *****************************************************
#
#         # TODO: Add error handling that confirms that the record_id columns are truly unique
#
#         # Establish columns this check will analyze
#         a_columns_to_check = check_specs["a_check2_columns"]
#         b_columns_to_check = check_specs["b_check2_columns"]
#
#         # Concatenate the selected columns into a single string and then hash
#         a_concatenated_columns = F.concat_ws(
#             F.lit("_"), *[tbla[col] for col in a_columns_to_check]
#         )
#         a_hashed = tbla.withColumn(
#             "A_HASHED_COLUMN", F.sha2(a_concatenated_columns, 256)
#         )
#         # a_hashed = a_hashed.select(a_record_id_cols + a_partition_cols + ["A_HASHED_COLUMN"])
#         a_hashed = a_hashed.select(
#             a_record_id_cols + ["PARTITION_VALUES"] + ["A_HASHED_COLUMN"]
#         )
#
#         b_concatenated_columns = F.concat_ws(
#             F.lit("_"), *[tblb[col] for col in b_columns_to_check]
#         )
#         b_hashed = tblb.withColumn(
#             "B_HASHED_COLUMN", F.sha2(b_concatenated_columns, 256)
#         )
#         # b_hashed = b_hashed.select(b_record_id_cols + b_partition_cols + ["B_HASHED_COLUMN"])
#         b_hashed = b_hashed.select(
#             b_record_id_cols + ["PARTITION_VALUES"] + ["B_HASHED_COLUMN"]
#         )
#
#         # Join the two hashed columns into a single table to compare
#         c2_zipped_id_cols = list(zip(a_record_id_cols, b_record_id_cols))
#         c2_join_condition = " & ".join(
#             [f"(a_hashed['{a}'] == b_hashed['{b}'])" for a, b in c2_zipped_id_cols]
#         )
#         c2_df = a_hashed.join(b_hashed, on=eval(c2_join_condition), rsuffix="_B_TBL")
#
#         # Only keep records that had a value change
#         c2_df = c2_df.filter(F.col("A_HASHED_COLUMN") != F.col("B_HASHED_COLUMN"))
#
#         # Only need the record id columns and the partition columns
#         c2_df = c2_df.select(b_record_id_cols + ["PARTITION_VALUES"])
#
#         # Obtain the query text that can be used to reproduce the records with changes
#         with session.query_history() as history:
#             c2_df.collect()
#         SQL_QUERY_TEXT = history.queries[0].sql_text
#
#         # Add a VARIANT column that is a dictionary of the B table record id(s)
#         id_list = [
#             item for colnm in b_record_id_cols for item in (F.lit(colnm), F.col(colnm))
#         ]
#         c2_df = c2_df.withColumn("RECORD_DICT", F.object_construct_keep_null(*id_list))
#
#         # df that contains the count of records with changes per partition
#         count_df = (
#             c2_df.group_by("PARTITION_VALUES")
#             .count()
#             .with_column_renamed("COUNT", "COUNT_OF_RECORDS_W_VALUE_DIFF")
#         )
#
#         # df that contains the record ids (limit 100) of records with changes per partition
#         ids_df = (
#             c2_df.groupBy("PARTITION_VALUES")
#             .agg(F.array_agg("RECORD_DICT").alias("TABLE_B_IDS_W_VALUE_DIFF_LIMIT_100"))
#             .with_column(
#                 "TABLE_B_IDS_W_VALUE_DIFF_LIMIT_100",
#                 F.array_slice(
#                     F.col("TABLE_B_IDS_W_VALUE_DIFF_LIMIT_100"), F.lit(0), F.lit(100)
#                 ),
#             )
#         )
#
#         result_df = count_df.join(ids_df, on=["PARTITION_VALUES"])
#
#         result_df = result_df.select(
#             F.lit(2).alias("CHECK_TYPE_ID"),
#             "PARTITION_VALUES",
#             # "COUNT_OF_RECORDS_W_VALUE_DIFF",
#             # "TABLE_B_IDS_W_VALUE_DIFF_LIMIT_100",
#             # F.lit(SQL_QUERY_TEXT).alias("SQL_QUERY_TEXT"),
#             F.object_construct_keep_null(
#                 F.lit("TABLE_A_COLUMNS"),
#                 F.lit(a_columns_to_check),
#                 F.lit("TABLE_B_COLUMNS"),
#                 F.lit(b_columns_to_check),
#                 F.lit("COUNT_OF_RECORDS_W_VALUE_DIFF"),
#                 "COUNT_OF_RECORDS_W_VALUE_DIFF",
#                 F.lit("TABLE_B_IDS_W_VALUE_DIFF_LIMIT_100"),
#                 "TABLE_B_IDS_W_VALUE_DIFF_LIMIT_100",
#                 F.lit("SQL_QUERY_TEXT"),
#                 F.lit(SQL_QUERY_TEXT),
#             ).alias("RESULTS"),
#         )
#
#
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#         # INCORPORATE ALERT THRESHOLDS
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#         result_df = (
#             result_df
#             .with_column("RESULTS", 
#                         F.object_insert(F.col("RESULTS"), 
#                                         F.lit("ALERT_THRESHOLD"), 
#                                         F.lit(check_specs["check2_thresholds"]))
#                         )
#             .with_column("RESULTS", 
#                         F.object_insert(F.col("RESULTS"), 
#                                         F.lit("ALERT_TRIGGERED_FLAG"), 
#                                         F.array_append(F.lit([]), F.when(F.abs(F.col("RESULTS")["COUNT_OF_RECORDS_W_VALUE_DIFF"]) > F.col("RESULTS")["ALERT_THRESHOLD"][0], 1).otherwise(0)))
#                         )
#             .with_column("ALERT_FLAG", 
#                         F.when(F.array_max(F.col("RESULTS")["ALERT_TRIGGERED_FLAG"])>0, 1).otherwise(0)
#                         )
#             .with_column("ALERT_STATUS", 
#                         F.when(F.col("ALERT_FLAG")==1, F.lit("pending review")).otherwise(None)
#                         )
#         )
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
#
#         # Add results to the unioned_results DF
#         unioned_results = unioned_results.union_all_by_name(result_df)
#
#     if 3 in check_id_list:
#         # *****************************************************
#         # CHECK 3: "column(s) sum"
#         # *****************************************************
#
#         # Establish columns this check will analyze
#         a_columns_to_check = check_specs["a_check3_columns"]
#         b_columns_to_check = check_specs["b_check3_columns"]
#
#         # Establish aggregate function that will be used on each partition
#         a_agg_list = [F.sum(colnm).alias(colnm) for colnm in a_columns_to_check]
#         b_agg_list = [F.sum(colnm).alias(colnm) for colnm in b_columns_to_check]
#
#         # Establish the names of the output keys
#         a_output_key = "TABLE_A_SUMS"
#         b_output_key = "TABLE_B_SUMS"
#
#         # Compare aggregate values for each column between the two tables by partition
#         result_df = compare_column_aggregates(
#             3,
#             tbla,
#             tblb,
#             a_columns_to_check,
#             b_columns_to_check,
#             a_agg_list,
#             b_agg_list,
#             a_output_key,
#             b_output_key,
#             udf_nm,
#         )
#
#
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#         # INCORPORATE ALERT THRESHOLDS
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#         result_df = (
#             result_df
#             .with_column("RESULTS", 
#                         F.object_insert(F.col("RESULTS"), 
#                                         F.lit("ALERT_THRESHOLD"), 
#                                         F.lit(check_specs["check3_thresholds"]))
#                         )
#             .with_column("RESULTS", 
#                         F.object_insert(F.col("RESULTS"), 
#                                         F.lit("ALERT_TRIGGERED_FLAG"), 
#                                         F.call_udf(alert_compare_udf_nm, F.col("RESULTS")["DELTA"], F.col("RESULTS")['ALERT_THRESHOLD']) )
#                         )
#             .with_column("ALERT_FLAG", 
#                         F.when(F.array_max(F.col("RESULTS")["ALERT_TRIGGERED_FLAG"])>0, 1).otherwise(0)
#                         )
#             .with_column("ALERT_STATUS", 
#                         F.when(F.col("ALERT_FLAG")==1, F.lit("pending review")).otherwise(None)
#                         )
#         )
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
#
#         # Add results to the unioned_results DF
#         unioned_results = unioned_results.union_all_by_name(result_df)
#
#     if 4 in check_id_list:
#         # *****************************************************
#         # CHECK 4: "column null count"
#         # *****************************************************
#
#         # Establish columns this check will analyze
#         a_columns_to_check = check_specs["a_check4_columns"]
#         b_columns_to_check = check_specs["b_check4_columns"]
#
#         # Establish aggregate function that will be used on each partition
#         a_agg_list = [
#             F.count(F.when(F.col(colnm).isNull(), True)).alias(colnm)
#             for colnm in a_columns_to_check
#         ]
#         b_agg_list = [
#             F.count(F.when(F.col(colnm).isNull(), True)).alias(colnm)
#             for colnm in b_columns_to_check
#         ]
#
#         # Establish the names of the output keys
#         a_output_key = "TABLE_A_NULL_COUNTS"
#         b_output_key = "TABLE_B_NULL_COUNTS"
#
#         # Compare aggregate values for each column between the two tables by partition
#         result_df = compare_column_aggregates(
#             4,
#             tbla,
#             tblb,
#             a_columns_to_check,
#             b_columns_to_check,
#             a_agg_list,
#             b_agg_list,
#             a_output_key,
#             b_output_key,
#             udf_nm,
#         )
#
#
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#         # INCORPORATE ALERT THRESHOLDS
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#         # TODO: Maybe add "KEY_THRESHOLD_IS_APPLIED_TO" in the job_specs dict for each check, so that instead of hard-coding "DELTA" below, it will apply the threshold to that key.
#         result_df = (
#             result_df
#             .with_column("RESULTS", 
#                         F.object_insert(F.col("RESULTS"), 
#                                         F.lit("ALERT_THRESHOLD"), 
#                                         F.lit(check_specs["check4_thresholds"]))
#                         )
#             .with_column("RESULTS", 
#                         F.object_insert(F.col("RESULTS"), 
#                                         F.lit("ALERT_TRIGGERED_FLAG"), 
#                                         F.call_udf(alert_compare_udf_nm, F.col("RESULTS")["DELTA"], F.col("RESULTS")['ALERT_THRESHOLD']) )
#                         )
#             .with_column("ALERT_FLAG", 
#                         F.when(F.array_max(F.col("RESULTS")["ALERT_TRIGGERED_FLAG"])>0, 1).otherwise(0)
#                         )
#             .with_column("ALERT_STATUS", 
#                         F.when(F.col("ALERT_FLAG")==1, F.lit("pending review")).otherwise(None)
#                         )
#         )
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
#
#
#         # Add results to the unioned_results DF
#         unioned_results = unioned_results.union_all_by_name(result_df)
#
#     if 5 in check_id_list:
#         # *****************************************************
#         # CHECK 5: "column distinct value count"
#         # *****************************************************
#
#         # Establish columns this check will analyze
#         a_columns_to_check = check_specs["a_check5_columns"]
#         b_columns_to_check = check_specs["b_check5_columns"]
#
#         # Establish aggregate function that will be used on each partition
#         a_agg_list = [
#             F.countDistinct(colnm).alias(colnm) for colnm in a_columns_to_check
#         ]
#         b_agg_list = [
#             F.countDistinct(colnm).alias(colnm) for colnm in b_columns_to_check
#         ]
#
#         # Establish the names of the output keys
#         a_output_key = "TABLE_A_DISTINCT_VALUE_COUNTS"
#         b_output_key = "TABLE_B_DISTINCT_VALUE_COUNTS"
#
#         # Compare aggregate values for each column between the two tables by partition
#         result_df = compare_column_aggregates(
#             5,
#             tbla,
#             tblb,
#             a_columns_to_check,
#             b_columns_to_check,
#             a_agg_list,
#             b_agg_list,
#             a_output_key,
#             b_output_key,
#             udf_nm,
#         )
#
#
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#         # INCORPORATE ALERT THRESHOLDS
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#         result_df = (
#             result_df
#             .with_column("RESULTS", 
#                         F.object_insert(F.col("RESULTS"), 
#                                         F.lit("ALERT_THRESHOLD"), 
#                                         F.lit(check_specs["check5_thresholds"]))
#                         )
#             .with_column("RESULTS", 
#                         F.object_insert(F.col("RESULTS"), 
#                                         F.lit("ALERT_TRIGGERED_FLAG"), 
#                                         F.call_udf(alert_compare_udf_nm, F.col("RESULTS")["DELTA"], F.col("RESULTS")['ALERT_THRESHOLD']) )
#                         )
#             .with_column("ALERT_FLAG", 
#                         F.when(F.array_max(F.col("RESULTS")["ALERT_TRIGGERED_FLAG"])>0, 1).otherwise(0)
#                         )
#             .with_column("ALERT_STATUS", 
#                         F.when(F.col("ALERT_FLAG")==1, F.lit("pending review")).otherwise(None)
#                         )
#         )
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
#
#         # Add results to the unioned_results DF
#         unioned_results = unioned_results.union_all_by_name(result_df)
#
#     if 6 in check_id_list:
#         # *****************************************************
#         # CHECK 6: "column distinct values dropped or added"
#         # *****************************************************# 
#
#         # Define and Register UDFs to get the values dropped, values added, and number of differences
#         udf_stage_loc = f"@{temp_objects_schema}.{temp_file_stage}"
#
#         vals_dropped_udf_nm = f"{temp_objects_schema}.find_values_dropped_{run_dttm_str}_udf_{random_number}"
#         @F.udf(name=vals_dropped_udf_nm, session=session, replace=True, is_permanent=True, stage_location=udf_stage_loc)
#         def find_values_dropped(arr1: list, arr2: list) -> list:
#             return [list(set(x1)-set(x2)) for x1, x2  in zip(arr1, arr2)]
#
#         vals_added_udf_nm = f"{temp_objects_schema}.find_values_added_{run_dttm_str}_udf_{random_number}"
#         @F.udf(name=vals_added_udf_nm, session=session, replace=True, is_permanent=True, stage_location=udf_stage_loc)
#         def find_values_added(arr1: list, arr2: list) -> list:
#             return [list(set(x2)-set(x1)) for x1, x2 in zip(arr1, arr2)]
#
#         num_diffs_udf_nm = f"{temp_objects_schema}.find_num_diffs_{run_dttm_str}_udf_{random_number}"
#         @F.udf(name=num_diffs_udf_nm, session=session, replace=True, is_permanent=True, stage_location=udf_stage_loc)
#         def find_num_diffs(arr1: list, arr2: list) -> list:
#             return [len(list(set(x1)-set(x2))) + len(list(set(x2)-set(x1))) for x1, x2 in zip(arr1, arr2)]
#
#         udfs_list = udfs_list + [vals_dropped_udf_nm, vals_added_udf_nm, num_diffs_udf_nm]
#
#
#         # Establish columns this check will analyze
#         a_columns_to_check = check_specs["a_check6_columns"]
#         b_columns_to_check = check_specs["b_check6_columns"]
#
#         # Establish aggregate function that will be used to get the DISTINCT VALUES for each column in each partition
#         a_agg_list = [F.collect_set(colnm).alias(colnm) for colnm in a_columns_to_check]
#         b_agg_list = [F.collect_set(colnm).alias(colnm) for colnm in b_columns_to_check]
#
#
#         # Compare aggregate values for each column between the two tables by partition
#         joined_df = get_group_aggregates(
#             tbla,
#             tblb,
#             a_columns_to_check,
#             b_columns_to_check,
#             a_agg_list,
#             b_agg_list
#         )
#
#         delta_df = (joined_df
#                     .withColumn(
#                         "VALUES_DROPPED",
#                         F.call_udf(vals_dropped_udf_nm, F.col("TABLE_A_AGG_VALUES"), F.col("TABLE_B_AGG_VALUES"))
#                     ).withColumn(
#                         "VALUES_ADDED",
#                         F.call_udf(vals_added_udf_nm, F.col("TABLE_A_AGG_VALUES"), F.col("TABLE_B_AGG_VALUES"))
#                     ).withColumn(
#                         "NUMBER_OF_DIFFERENCES",
#                         F.call_udf(num_diffs_udf_nm, F.col("TABLE_A_AGG_VALUES"), F.col("TABLE_B_AGG_VALUES"))
#                     )
#         )
#
#         result_df = delta_df.select(
#             F.lit(6).alias("CHECK_TYPE_ID"),
#             "PARTITION_VALUES",
#             F.object_construct_keep_null(
#                 F.lit("TABLE_A_COLUMNS"),
#                 F.lit(a_columns_to_check),
#                 F.lit("TABLE_B_COLUMNS"),
#                 F.lit(b_columns_to_check),
#                 F.lit("VALUES_DROPPED"),
#                 F.col("VALUES_DROPPED"),
#                 F.lit("VALUES_ADDED"),
#                 F.col("VALUES_ADDED"),
#                 F.lit("NUMBER_OF_DIFFERENCES"),
#                 F.col("NUMBER_OF_DIFFERENCES"),
#             ).alias("RESULTS"),
#         )
#
#
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#         # INCORPORATE ALERT THRESHOLDS
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
#         result_df = (
#             result_df
#             .with_column("RESULTS", 
#                         F.object_insert(F.col("RESULTS"), 
#                                         F.lit("ALERT_THRESHOLD"), 
#                                         F.lit(check_specs["check6_thresholds"]))
#                         )
#             .with_column("RESULTS", 
#                         F.object_insert(F.col("RESULTS"), 
#                                         F.lit("ALERT_TRIGGERED_FLAG"), 
#                                         F.call_udf(alert_compare_udf_nm, F.col("RESULTS")["NUMBER_OF_DIFFERENCES"], F.col("RESULTS")['ALERT_THRESHOLD']) )
#                         )
#             .with_column("ALERT_FLAG", 
#                         F.when(F.array_max(F.col("RESULTS")["ALERT_TRIGGERED_FLAG"])>0, 1).otherwise(0)
#                         )
#             .with_column("ALERT_STATUS", 
#                         F.when(F.col("ALERT_FLAG")==1, F.lit("pending review")).otherwise(None)
#                         )
#         )
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
#
#         # Add results to the unioned_results DF
#         unioned_results = unioned_results.union_all_by_name(result_df)
#
#
#     if 7 in check_id_list:
#         # *****************************************************
#         # CHECK 7: "column min/max values"
#         # *****************************************************
#
#         # Define and Register UDFs to get the higher of two min valuess and the lower of two max values
#         udf_stage_loc = f"@{temp_objects_schema}.{temp_file_stage}"
#
#         get_max_udf_nm = f"{temp_objects_schema}.get_max_nums{run_dttm_str}_udf_{random_number}"
#         @F.udf(name=get_max_udf_nm, session=session, replace=True, is_permanent=True, stage_location=udf_stage_loc)
#         def get_max_nums(arr1: list, arr2: list) -> list:
#             return [max(x1, x2) if (x1 is not None) & (x2 is not None) else None for x1, x2  in zip(arr1, arr2)]
#
#         get_min_udf_nm = f"{temp_objects_schema}.get_min_nums{run_dttm_str}_udf_{random_number}"
#         @F.udf(name=get_min_udf_nm, session=session, replace=True, is_permanent=True, stage_location=udf_stage_loc)
#         def get_min_nums(arr1: list, arr2: list) -> list:
#             return [min(x1, x2) if (x1 is not None) & (x2 is not None) else None for x1, x2  in zip(arr1, arr2)]
#
#         udfs_list = udfs_list + [get_max_udf_nm, get_min_udf_nm]
#
#
#         # Establish columns this check will analyze
#         a_columns_to_check = check_specs["a_check7_columns"]
#         b_columns_to_check = check_specs["b_check7_columns"]
#
#
#         # Compare aggregate MIN values for each column between the two tables by partition
#         joined_df_mins = get_group_aggregates(
#             tbla,
#             tblb,
#             a_columns_to_check,
#             b_columns_to_check,
#             [F.min(colnm).alias(colnm) for colnm in a_columns_to_check],
#             [F.min(colnm).alias(colnm) for colnm in b_columns_to_check]
#         )
#
#         delta_df_mins = joined_df_mins.select(
#             "PARTITION_VALUES",
#             F.lit(a_columns_to_check).alias("TBL_A_COLS"),
#             F.lit(b_columns_to_check).alias("TBL_B_COLS"),
#             F.col("TABLE_A_AGG_VALUES").alias("TABLE_A_MIN_VALUES"),
#             F.col("TABLE_B_AGG_VALUES").alias("TABLE_B_MIN_VALUES"),
#             F.call_udf(udf_nm, F.col("TABLE_A_AGG_VALUES"), F.col("TABLE_B_AGG_VALUES")).alias("DELTA_MIN"),
#             F.call_udf(get_max_udf_nm, F.col("TABLE_A_AGG_VALUES"), F.col("TABLE_B_AGG_VALUES")).alias("_HIGHER_MIN")
#         )
#
#         # Compare aggregate MAX values for each column between the two tables by partition
#         joined_df_maxes = get_group_aggregates(
#             tbla,
#             tblb,
#             a_columns_to_check,
#             b_columns_to_check,
#             [F.max(colnm).alias(colnm) for colnm in a_columns_to_check],
#             [F.max(colnm).alias(colnm) for colnm in b_columns_to_check]
#         )
#
#         delta_df_maxes = joined_df_maxes.select(
#             "PARTITION_VALUES",
#             F.col("TABLE_A_AGG_VALUES").alias("TABLE_A_MAX_VALUES"),
#             F.col("TABLE_B_AGG_VALUES").alias("TABLE_B_MAX_VALUES"),
#             F.call_udf(udf_nm, F.col("TABLE_A_AGG_VALUES"), F.col("TABLE_B_AGG_VALUES")).alias("DELTA_MAX"),
#             F.call_udf(get_min_udf_nm, F.col("TABLE_A_AGG_VALUES"), F.col("TABLE_B_AGG_VALUES")).alias("_LOWER_MAX")
#         )
#
#
#         # Obtain counts of rows that were between the two tables' min values and counts that were between the two tables max values.
#         def get_counts_btwn_mins_or_maxes(tbl_letter:str, cols_to_check_list:list, base_tbl:SnowparkDataFrame, deltas_tbl:SnowparkDataFrame, mins_or_maxes:str) -> SnowparkDataFrame:
#             agg_func_list = []
#             for i in range(len(cols_to_check_list)):
#                 colnm = cols_to_check_list[i]
#                 if mins_or_maxes.upper() == 'MIN':
#                     agg_func_list.append( F.sum( F.when(F.col(colnm) < F.expr(f'_HIGHER_MIN[{i}]'), F.lit(1)).otherwise(F.lit(0)) ).alias(f'COUNT_BTWN_MINS_{colnm}') )
#                 elif mins_or_maxes.upper() == 'MAX':
#                     agg_func_list.append( F.sum( F.when(F.col(colnm) > F.expr(f'_LOWER_MAX[{i}]'), F.lit(1)).otherwise(F.lit(0)) ).alias(f'COUNT_BTWN_MAXES_{colnm}') )
#
#             counts_btwn_df = base_tbl.join(deltas_tbl, on=['PARTITION_VALUES']).group_by('PARTITION_VALUES').agg(*agg_func_list)
#
#             counts_btwn_df = counts_btwn_df.select(
#                 "PARTITION_VALUES",
#                 F.array_construct(*counts_btwn_df.drop("PARTITION_VALUES").columns).alias(f"TBL_{tbl_letter}_ROWS_BTWN_COUNT")   
#             )
#
#             return counts_btwn_df
#
#
#         a_counts_btwn_mins_df = get_counts_btwn_mins_or_maxes('A', a_columns_to_check, tbla, delta_df_mins, 'MIN')
#         b_counts_btwn_mins_df = get_counts_btwn_mins_or_maxes('B', b_columns_to_check, tblb, delta_df_mins, 'MIN')
#         combined_counts_btwn_mins = a_counts_btwn_mins_df.join(b_counts_btwn_mins_df, on=['PARTITION_VALUES']).select(
#             "PARTITION_VALUES",
#             F.call_udf(get_max_udf_nm, F.col("TBL_A_ROWS_BTWN_COUNT"), F.col("TBL_B_ROWS_BTWN_COUNT")).alias("COUNT_OF_RECORDS_BTWN_CONTROL_AND_COMPARE_MINS")
#         )
#
#         a_counts_btwn_maxes_df = get_counts_btwn_mins_or_maxes('A', a_columns_to_check, tbla, delta_df_maxes, 'MAX')
#         b_counts_btwn_maxes_df = get_counts_btwn_mins_or_maxes('B', b_columns_to_check, tblb, delta_df_maxes, 'MAX')
#         combined_counts_btwn_maxes = a_counts_btwn_maxes_df.join(b_counts_btwn_maxes_df, on=['PARTITION_VALUES']).select(
#             "PARTITION_VALUES",
#             F.call_udf(get_max_udf_nm, F.col("TBL_A_ROWS_BTWN_COUNT"), F.col("TBL_B_ROWS_BTWN_COUNT")).alias("COUNT_OF_RECORDS_BTWN_CONTROL_AND_COMPARE_MAXES")
#         )
#
#
#         combined_df = delta_df_mins.join(
#             combined_counts_btwn_mins, on=['PARTITION_VALUES']
#         ).join(
#             delta_df_maxes, on=['PARTITION_VALUES']
#         ).join(
#             combined_counts_btwn_maxes, on=['PARTITION_VALUES']
#         ).drop(
#             "_HIGHER_MIN",
#             "_LOWER_MAX"
#         )
#
#
#
#         result_df = combined_df.select(
#             F.lit(7).alias("CHECK_TYPE_ID"),
#             "PARTITION_VALUES",
#             F.object_construct_keep_null(
#                 F.lit("TABLE_A_COLUMNS"),
#                 F.lit(a_columns_to_check),
#                 F.lit("TABLE_B_COLUMNS"),
#                 F.lit(b_columns_to_check),
#                 F.lit("TABLE_A_MIN_VALUES"),
#                 F.col("TABLE_A_MIN_VALUES"),
#                 F.lit("TABLE_B_MIN_VALUES"),
#                 F.col("TABLE_B_MIN_VALUES"),
#                 F.lit("DELTA_MIN"),
#                 F.col("DELTA_MIN"),
#                 F.lit("COUNT_OF_RECORDS_BTWN_CONTROL_AND_COMPARE_MINS"),
#                 F.col("COUNT_OF_RECORDS_BTWN_CONTROL_AND_COMPARE_MINS"),
#                 F.lit("TABLE_A_MAX_VALUES"),
#                 F.col("TABLE_A_MAX_VALUES"),
#                 F.lit("TABLE_B_MAX_VALUES"),
#                 F.col("TABLE_B_MAX_VALUES"),
#                 F.lit("DELTA_MAX"),
#                 F.col("DELTA_MAX"),
#                 F.lit("COUNT_OF_RECORDS_BTWN_CONTROL_AND_COMPARE_MAXES"),
#                 F.col("COUNT_OF_RECORDS_BTWN_CONTROL_AND_COMPARE_MAXES")
#             ).alias("RESULTS"),
#         )
#
#
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#         # INCORPORATE ALERT THRESHOLDS
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
#         result_df = (
#             result_df
#             .with_column("RESULTS", 
#                         F.object_insert(F.col("RESULTS"), 
#                                         F.lit("ALERT_THRESHOLD"), 
#                                         F.lit(check_specs["check7_thresholds"]))
#                         )
#             .with_column("RESULTS", 
#                         F.object_insert(F.col("RESULTS"), 
#                                         F.lit("ALERT_TRIGGERED_FLAG"), 
#                                         F.call_udf(alert_min_max_compare_udf_nm, F.col("RESULTS")["DELTA_MIN"], F.col("RESULTS")["DELTA_MAX"], F.col("RESULTS")['ALERT_THRESHOLD']) )
#                         )
#             .with_column("ALERT_FLAG", 
#                         F.when(F.array_max(F.col("RESULTS")["ALERT_TRIGGERED_FLAG"])>0, 1).otherwise(0)
#                         )
#             .with_column("ALERT_STATUS", 
#                         F.when(F.col("ALERT_FLAG")==1, F.lit("pending review")).otherwise(None)
#                         )
#         )
#         # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
#
#         # Add results to the unioned_results DF
#         unioned_results = unioned_results.union_all_by_name(result_df)
#
#
#
#     # *****************************************************
#     # Write Results
#     # *****************************************************
#
#     # unioned_results = unioned_results.sort("CHECK_TYPE_ID", "PARTITION_VALUES")
#
#     # NOTE: Added ALERT_FLAG and ALERT_STATUS to the results tables # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#     final_df = (
#         unioned_results.select(
#             F.lit(job_id).alias("JOB_ID"),
#             F.lit(run_dttm).alias("RUN_DATETIME"),
#             "CHECK_TYPE_ID",
#             "PARTITION_VALUES",
#             F.lit(a_qualified_input_table_nm).alias("CONTROL_TBL_NM"),
#             F.lit(b_qualified_input_table_nm).alias("COMPARE_TBL_NM"),
#             "RESULTS",
#             "ALERT_FLAG", # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#             "ALERT_STATUS" # *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#         )
#         .select(
#             results_tbl_columns  # This second .select ensures the columns are in the correct order to be inserted into an existing table if job_id>=0
#         )
#         .sort("CHECK_TYPE_ID", "PARTITION_VALUES")
#     )
#
#     final_df.write.save_as_table(qualified_result_tbl_nm, mode="append")
#
#     return {
#         "QUALIFIED_RESULT_TBL_NM": qualified_result_tbl_nm,
#         "RESULT_DB": results_db,
#         "RESULT_SCHEMA": results_schema,
#         "RESULT_TBL_NM": results_tbl_nm,
#         "JOB_NAME": job_nm,
#         "JOB_ID": job_id,
#         "CHECKS_PERFORMED": check_id_list,
#         "UDF_NAMES": udfs_list
#     }
#
# func = dq_non_stat_sproc

def compute(session,arg1,arg2):
    return func(session,arg1,arg2)